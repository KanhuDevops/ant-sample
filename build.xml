<project name="ant-sample" basedir="." default="build">

<!-- ##########################################################################
         ####################### target: checkstyle ###############################
         ########################################################################## -->

    <target name="checkstyle"
            description="Generates a report of code convention violations."
            depends="init-checkstyle">

        <!-- See https://checkstyle.org/anttask.html
             for full options of using checkstyle with ant-->

        <checkstyle config="checkstyle.xml"
                    failureProperty="checkstyle.failure"
                    failOnViolation="false">
            <formatter type="xml" tofile="checkstyle_report.xml"/>
            <fileset dir="src" includes="**/*.java"/>
        </checkstyle>

        <!-- secondary example if your classpath already includes checkstyle
             and you want to include another jar with custom checks that is
             in a custom location -->

        <checkstyle config="checkstyle.xml"
                    failOnViolation="false">
            <formatter type="xml" tofile="checkstyle_report.xml"/>
            <fileset dir="src" includes="**/*.java"/>
        </checkstyle>
    </target>

    <target name="init-checkstyle" depends="resolve">

        <!-- checkstyle itself all dependecies and Sevntu custom checks
             are retrieved by Ivy (see ivy.xml) into lib folder
             and will be accessible to checkstyle-->
        <path id="execution.lib.path">
            <fileset dir="lib" includes="*.jar"/>
        </path>

        <!-- loading ant task -->
        <taskdef name="checkstyle"
             classname="com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask"
             classpathref="execution.lib.path"
             />
    </target>


    <!-- properties -->
    <property name="src.dir"     value="src"/>
    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir"     value="${build.dir}/jar"/>
    <property name="doc.dir"     value="doc"/>

    <!-- targets -->
    <target name="compile" description="compile project">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false"/>
    </target>

    <target name="jar" depends="compile" description="generate the distribution jar">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="piona.Main"/>
            </manifest>
        </jar>
    </target>

    <target name="run" depends="jar" description="run application">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true"/>
    </target>

    <target name="build" depends="jar" description="build application"/>

    <target name="doc" description="generate documentation">
        <mkdir dir="${doc.dir}" />
        <javadoc destdir="${doc.dir}" sourcepath="${src.dir}"/>
    </target>

    <target name="clean" description="clean up build files">
        <delete dir="${build.dir}"/>
        <delete dir="${doc.dir}" />
    </target>

    <target name="rebuild" depends="clean,build" description="rebuild application"/>

</project>
